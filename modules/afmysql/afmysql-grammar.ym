%code top {
#include "afmysql-parser.h"

}


%code {

#include "afmysql.h"
#include "cfg-parser.h"
#include "afmysql-grammar.h"
#include "messages.h"
#include "plugin.h"

extern LogDriver *last_driver;

}

%name-prefix "afmysql_"

/* this parameter is needed in order to instruct bison to use a complete
 * argument list for yylex/yyerror */

%lex-param {CfgLexer *lexer}
%parse-param {CfgLexer *lexer}
%parse-param {LogDriver **instance}
%parse-param {gpointer arg}


/* INCLUDE_DECLS */

%token KW_MYSQL
%token KW_DEFAULT
%token KW_RETRIES

%type   <ptr> dest_afmysql
%type   <ptr> dest_afmysql_params
%type   <ptr> dest_afmysql_values
%type   <ptr> dest_afmysql_values_build
//%type   <num> dest_afmysql_flags

%%

start
        : LL_CONTEXT_DESTINATION KW_MYSQL
          {
            last_driver = *instance = afmysql_dd_new();
          }
          '(' dest_afmysql_options ')'         { YYACCEPT; }
	;


dest_afmysql
        : KW_MYSQL '(' dest_afmysql_params ')'	{ $$ = $3; }
        ;

dest_afmysql_params
        :
          {
#if ENABLE_MYSQL
            last_driver = *instance = afmysql_dd_new();
#endif /* ENABLE_MYSQL */
          }
          dest_afmysql_options			{ $$ = last_driver; }
        ;

dest_afmysql_options
        : dest_afmysql_option dest_afmysql_options
        |
        ;

dest_afmysql_option
        : KW_IFDEF {
#if ENABLE_MYSQL
}
        | KW_HOST '(' string ')'		{ afmysql_dd_set_host(last_driver, $3); free($3); }
        | KW_PORT '(' string_or_number ')'
          {
            CHECK_ERROR(afmysql_dd_check_port($3), @3, "Illegal sql port number: %s", $3);
            afmysql_dd_set_port(last_driver, $3);
            free($3);
          }
        | KW_USERNAME '(' string ')'		{ afmysql_dd_set_user(last_driver, $3); free($3); }
        | KW_PASSWORD '(' string ')'		{ afmysql_dd_set_password(last_driver, $3); free($3); }
        | KW_DATABASE '(' string ')'		{ afmysql_dd_set_database(last_driver, $3); free($3); }
        | KW_TABLE '(' string ')'		{ afmysql_dd_set_table(last_driver, $3); free($3); }
        | KW_COLUMNS '(' string_list ')'	{ afmysql_dd_set_columns(last_driver, $3); }
        | KW_INDEXES '(' string_list ')'        { afmysql_dd_set_indexes(last_driver, $3); }
        | KW_VALUES '(' dest_afmysql_values ')'		{ afmysql_dd_set_values(last_driver, $3); }
        | KW_FRAC_DIGITS '(' LL_NUMBER ')'         { afmysql_dd_set_frac_digits(last_driver, $3); }
	| KW_TIME_ZONE '(' string ')'           { afmysql_dd_set_send_time_zone(last_driver,$3); free($3); }
	| KW_LOCAL_TIME_ZONE '(' string ')'     { afmysql_dd_set_local_time_zone(last_driver,$3); free($3); }
        | KW_NULL '(' string ')'                { afmysql_dd_set_null_value(last_driver, $3); free($3); }
        | KW_RETRIES '(' LL_NUMBER ')'          { afmysql_dd_set_retries(last_driver, $3); }
        | KW_FLUSH_LINES '(' LL_NUMBER ')'      { afmysql_dd_set_flush_lines(last_driver, $3); }
        | KW_FLUSH_TIMEOUT '(' LL_NUMBER ')'    { afmysql_dd_set_flush_timeout(last_driver, $3); }
        | KW_SESSION_STATEMENTS '(' string_list ')' { afmysql_dd_set_session_statements(last_driver, $3); }
//        | KW_FLAGS '(' dest_afmysql_flags ')'     { afmysql_dd_set_flags(last_driver, $3); }
	| dest_driver_option
        | KW_ENDIF {
#endif /* ENABLE_MYSQL */
}
        ;

dest_afmysql_values
        : dest_afmysql_values_build               { $$ = g_list_reverse($1); }
        ;

dest_afmysql_values_build
        : string dest_afmysql_values_build	{ $$ = g_list_append($2, g_strdup($1)); free($1); }
        | KW_DEFAULT dest_afmysql_values_build	{ $$ = g_list_append($2, GUINT_TO_POINTER(AFMYSQL_COLUMN_DEFAULT)); }
        |					{ $$ = NULL; }
        ;

/*dest_afmysql_flags
        : string dest_afmysql_flags               { $$ = afmysql_dd_lookup_flag($1) | $2; free($1); }
        |                                       { $$ = 0; }
        ;
*/
/* INCLUDE_RULES */

%%
